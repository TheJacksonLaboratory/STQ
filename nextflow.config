
// Global default params, used in configs
params {

    // Default workflow
    workflow = "arbitrary_grid" // "two_references" "one_reference" "arbitrary_grid" "xenome_indices"

    input                      = "./assets/samplesheet.csv"

    container_inception        = "/projects/chuang-lab/USERS/domans/containers/container-mamba-inception.sif"
    container_ctranspath       = "/projects/chuang-lab/USERS/domans/containers/local/mamba-timm.sif"
    container_hovernet         = "/projects/chuang-lab/USERS/domans/containers/container-singularity-hovernet-py.sif"
    container_stainnet         = "/projects/chuang-lab/USERS/domans/containers/container-singularity-stainnet.sif"
    container_staintools       = "/projects/chuang-lab/USERS/domans/containers/container-singularity-staintools.sif"
    container_deepfocus        = "/projects/chuang-lab/USERS/domans/containers/deepfocus.sif"
    container_vips             = "/projects/chuang-lab/USERS/domans/containers/container-singularity-vips.sif"
    container_ome             = "/projects/chuang-lab/USERS/domans/containers/local/ome.sif"
    container_xenome           = "/projects/compsci/omics_share/meta/containers/quay.io-jaxcompsci-xenome-1.0.1.img"
    container_fastqtools       = "/projects/chuang-lab/USERS/domans/containers/container-singularity-fastqtools.sif"
    container_spaceranger      = "/projects/chuang-lab/USERS/domans/containers/container-singularity-spaceranger.sif"
    container_bafextract       = "/projects/chuang-lab/USERS/domans/containers/container-singularity-bafextract.sif"
    container_samtools         = "${params.container_bafextract}"
    container_python           = "/projects/chuang-lab/USERS/domans/containers/container-singularity-python.sif"
    container_velocyto         = "/projects/chuang-lab/USERS/domans/containers/container-singularity-velocyto.sif"

    outdir                     = "./results"
    tracedir                   = "${params.outdir}/pipeline_info"

    memory_scale_factor        = 1.0

	  bind                       = ""

}

// Default parameters
if (params.workflow == 'one_reference') {
    includeConfig 'conf/analysis-one.config'

    if (params.do_img_subworkflow) {
        includeConfig 'conf/analysis-img.config'
    }
}

if (params.workflow == 'two_references') {
    includeConfig 'conf/analysis-two.config'

    if (params.do_img_subworkflow) {
        includeConfig 'conf/analysis-img.config'
    }
}

if (params.workflow == 'arbitrary_grid') {
    includeConfig 'conf/analysis-img.config'
}

// Load any custom parameters overriding defaults
//includeConfig 'conf/analysis-pancreas.config'




process {
    withName: GUNZIP {
        cpus = 1
        memory = 20.GB
        container = params.container_vips
        clusterOptions = '--time=01:00:00'
    }
    withName: GUNZIP_FASTA {
        cpus = 1
        memory = 20.GB
        container = params.container_vips
        clusterOptions = '--time=01:00:00'
    }
    withName: DECONVOLUTION {
        cpus = 8
        memory = 50.GB
        container = params.container_xenome
        clusterOptions = '--time=06:00:00'
    }
    withName: XENOME_GENERATE_INDEX {
        cpus = 16
        memory = 100.GB
        container = params.container_xenome
        clusterOptions = '--time=06:00:00'
    }	
    withLabel: low_process {
        cpus = 1
        memory = 8.GB
        container = params.container_fastqtools
    }
    withLabel: samtools {
        cpus = 4
        memory = 64.GB
        container = params.container_samtools
        clusterOptions = '--time=03:00:00'
    }
    withLabel: splicing_quantification {
        cpus = 1
        memory = 64.GB
        container = params.container_velocyto
        clusterOptions = '--time=09:00:00'
    }    
    withLabel: python_low_process {
        cpus = 1
        memory = 12.GB
        container = params.container_python
        clusterOptions = '--time=01:00:00'
    }
    withName: SPACERANGER {
        cpus = 8
        memory = 90.GB
        container = params.container_spaceranger
        clusterOptions = '--time=24:00:00'
    }
    withLabel: bafextract {
        cpus = 1
        memory = 36.GB
        container = params.container_bafextract
        clusterOptions = '--time=03:00:00'
    }
    withLabel: vips_process {
        cpus = 1
        memory = 3.GB
        container = params.container_vips
    }
    withLabel: process_ome {
        cpus = 1
        memory = 36.GB
        container = params.container_ome
    }
    withLabel: process_estimate_size {
        cpus = 1
        memory = 2.GB
        container = params.container_inception
    }
    withLabel: process_extract {
        cpus = 1
        container = params.container_inception
        clusterOptions = '--time=03:00:00'
    }
    withLabel: color_normalization_process {
        cpus = 1
        container = params.container_stainnet
        clusterOptions = '--time=16:00:00'
    }
    withLabel: stain_normalization_process {
        cpus = 1
        container = params.container_staintools
        clusterOptions = '--time=16:00:00'
    }
    withLabel: python_process_low {
        cpus = 1
        container = params.container_inception
        clusterOptions = '--time=02:00:00'
    }
    withLabel: process_focus {
        cpus = 1
        container = params.container_deepfocus
        clusterOptions = '--time=16:00:00'
    }    
    withLabel: process_inception {
        cpus = 10
        container = params.container_inception
        clusterOptions = '--time=16:00:00'
    }
    withLabel: process_ctranspath {
        cpus = 10
        container = params.container_ctranspath        
        if (params.ctranspath_device_mode == 'gpu') {
            cpus = 16
            clusterOptions = '--time=02:00:00 -q gpu_inference --gres=gpu:1 --export=ALL'
            containerOptions = '--nv'
            queue = 'gpus'
        }
        else if (params.ctranspath_device_mode == 'cpu') {
            cpus = 10
            clusterOptions = '--time=16:00:00'
        }
    }
    withLabel: process_stardist {
        cpus = 4
        container = params.container_inception
        clusterOptions = '--time=16:00:00'
    }
    withLabel: process_hovernet_low {
        cpus = 1
        memory = 3.GB
        container = params.container_hovernet
        clusterOptions = '--time=02:00:00'
    }
    withLabel: process_hovernet {
        container = params.container_hovernet
        if (params.do_nuclear_sementation || params.sample_tiles_subworkflow) {
            if (params.hovernet_device_mode == 'gpu') {
                cpus = 16
                clusterOptions = '--time=02:00:00 -q gpu_inference --gres=gpu:1 --export=ALL'
                containerOptions = '--nv'
                queue = 'gpus'
            }
            else if (params.hovernet_device_mode == 'cpu') {
                cpus = 10
                clusterOptions = '--time=48:00:00'
            }
        }
    }
}


profiles {
    slurm {
        executor {
            name = "slurm"
            submitRateLimit = '100/1s'
            queueSize = 250  
        }
        process.queue = "compute"
        process.clusterOptions = '-q batch'
        process.module = "slurm"
    }
    singularity {
        process.module = 'singularity'
        singularity.enabled    = true
        singularity.envWhitelist = 'CUDA_VISIBLE_DEVICES'
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        singularity.runOptions = params.bind
    }
    test {
        includeConfig 'conf/test.config'
    }
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container. 
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    author          = 'Sergii Domanskyi'
    homePage        = 'https://github.com/TheJacksonLaboratory/STQ'
    description     = 'Spatial Transcriptomics Quantification'
    mainScript      = 'main.nf'
}
