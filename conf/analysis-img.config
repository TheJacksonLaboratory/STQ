
params {

    short_workflow                   = true

    stain_normalization              = true
    do_nuclear_segmentation          = true
    check_focus                      = true
    extract_tile_features            = true
    sample_tiles_subworkflow         = true
    do_segmentation_anndata          = true
    do_imaging_anndata               = true
    export_image                     = true
    export_image_metadata            = true
    do_superpixels                   = false

    // Short workflow skips: ROI extraction, stain normalization, image formatting and resizing, export of image and its metadata
    if (params.short_workflow) {
        do_nuclear_segmentation      = false
        check_focus                  = false
        extract_tile_features        = true
        sample_tiles_subworkflow     = false
        do_imaging_anndata           = true
        do_superpixels               = false
    }
    
    target_mpp                       = 0.25
    
    compression                      = 'LZW'
    tiled_tiff_tile_size             = 1024
    thumbnail_downsample_factor      = 0.05
    
    mask_background_cutoff           = 210.0
   
    pixel_mask_threshold_low         = 100
    pixel_mask_threshold_high        = 200
    
    use_provided_grid                = true
        
    grid_type                        = 'square' // 'hex' 'square'
    grid_spot_diamter                = 56 // visium=65 // 56
    grid_spot_horizontal_spacing     = 112 // visium=100 // 112
    grid_aspect_correction           = 0.95
    
    fraction_for_mask                = 0.1
    
    do_clustering                    = true

    downsample_expanded_tile         = true
    expansion_factor                 = [1, 2, 3, 4] // [1, 2, 3, 4] if downsampling, then this factor will be rounded up to integer 1.25 -> 2
    subtiling                        = false
    subcoords_factor                 = 4
    subcoords_list                   = '[[1, 1], [3, 1], [2, 2], [1, 3], [3, 3]]'

    if (params.do_clustering) {
        expansion_factor_for_clustering  = 2 // one of expansion_factor
        suffix_for_clustering            = 'ctranspath' // 'ctranspath' or 'inception' or 'uni' or 'conch'
        plot_dpi                         = 300
    }
    
    deepfocus_model_path             = "/projects/chuang-lab/USERS/domans/dev-focus/retrained-t0t1/" // "/deepfocus/" // "/projects/chuang-lab/USERS/domans/dev-focus/retrained-t0t1/"
    
    // Request access on HugginFace and download the checkpoints
    // UNI checkpoint: https://huggingface.co/MahmoodLab/UNI https://huggingface.co/MahmoodLab/UNI/blob/main/pytorch_model.bin
    // CONCH checkpoint: https://huggingface.co/MahmoodLab/CONCH https://huggingface.co/MahmoodLab/CONCH/blob/main/pytorch_model.bin
    uni_model_checkpoint             = "/projects/chuang-lab/USERS/domans/containers/private/pytorch_model_uni_11_06_2024.bin"
    conch_model_checkpoint           = "/projects/chuang-lab/USERS/domans/containers/private/pytorch_model_conch_11_06_2024.bin"
    use_conch_normalizer             = true

    if (params.extract_tile_features) {
        // *.tsv.gz features are posted in './features/'

        extract_transpath_features   = true // must be true
        extract_mocov3_features      = true
        extract_inception_features   = true
        extract_uni_features         = true
        extract_conch_features       = true
    }

    if (params.stain_normalization) {
        macenko_normalization         = true
        
        if (params.macenko_normalization) {
            stain_reference_image     = "/projects/chuang-lab/USERS/domans/containers/bronchus.tif"
            stain_patch_size          = 512
        }
        else {
            stainnet                  = "/projects/chuang-lab/USERS/domans/containers/StainNet-Public_layer3_ch32.pth"
        }
    }


    if (params.sample_tiles_subworkflow) {        
        hovernet_device_mode              = "gpu"
        hovernet_batch_size               = 1
        hovernet_num_inference_workers    = 1
        hovernet_spot_assignment_factor   = 1
        hovernet_spot_assignment_shape    = 'square'
        hovernet_min_cell_type_prob       = 0.75
        hovernet_chunk_size               = 4096
        hovernet_tile_size                = 1024        
    }


    if (params.do_nuclear_segmentation) {
        nuclei_segmentation_dir       = "nucseg"
        
        hovernet_segmentation         = false
        
        if (params.hovernet_segmentation) {
            hovernet_device_mode      = "gpu"
            hovernet_spot_assignment_factor   = 1
            hovernet_spot_assignment_shape    = 'square'
            hovernet_min_cell_type_prob       = 0.75

            if (params.hovernet_device_mode == 'gpu') {
                hovernet_batch_size               = 32
                hovernet_num_inference_workers    = 8
                hovernet_chunk_size               = 10000
                hovernet_tile_size                = 2048
            }
            else if (params.hovernet_device_mode == 'cpu') {
                hovernet_batch_size               = 1
                hovernet_num_inference_workers    = 1
                hovernet_chunk_size               = 4096
                hovernet_tile_size                = 1024
            }    
        }
        else {
            stardist_model            = "/projects/chuang-lab/USERS/domans/containers/stardist-models.v0.1/python_2D_versatile_he/"
            stardist_block_size       = 4096
            stardist_expand_size      = 15
        }
    }


    if (params.do_superpixels) {
        export_superpixels_contours      = true
        
        superpixel_compactness           = 1
        pixels_per_segment               = 10000
        superpixel_patch_size            = 2048
        superpixel_downsampling_factor   = 4
        
        od_block_size                    = 4096
        
        expand_nuclei_distance           = 15
    }
    
    if (params.sample_tiles_subworkflow) {
        tiles_per_slide                   = 100
    }
}
